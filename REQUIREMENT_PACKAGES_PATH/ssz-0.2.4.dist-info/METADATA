Metadata-Version: 2.1
Name: ssz
Version: 0.2.4
Summary: ssz: Python implementation of the Simple Serialization encoding and decoding
Home-page: https://github.com/ethereum/py-ssz
Author: Jason Carver
Author-email: ethcalibur+pip@gmail.com
License: MIT
Keywords: ethereum
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Python: >=3.6, <4
Requires-Dist: eth-utils (<2,>=1)
Requires-Dist: lru-dict (>=1.1.6)
Requires-Dist: pyrsistent (<0.17,>=0.16.0)
Provides-Extra: dev
Requires-Dist: bumpversion (<1,>=0.5.3) ; extra == 'dev'
Requires-Dist: wheel ; extra == 'dev'
Requires-Dist: twine ; extra == 'dev'
Requires-Dist: ipython ; extra == 'dev'
Requires-Dist: pre-commit (==1.18.3) ; extra == 'dev'
Requires-Dist: pytest (==4.4.0) ; extra == 'dev'
Requires-Dist: pytest-xdist (==1.28.0) ; extra == 'dev'
Requires-Dist: pytest-watch (<5,>=4.1.0) ; extra == 'dev'
Requires-Dist: tox (<3,>=2.9.1) ; extra == 'dev'
Requires-Dist: hypothesis (==4.54.0) ; extra == 'dev'
Requires-Dist: ruamel.yaml (==0.15.87) ; extra == 'dev'
Requires-Dist: mypy-extensions (<1.0.0,>=0.4.1) ; extra == 'dev'
Requires-Dist: flake8 (==3.7.8) ; extra == 'dev'
Requires-Dist: isort (==4.3.21) ; extra == 'dev'
Requires-Dist: black (==19.3b) ; extra == 'dev'
Requires-Dist: Sphinx (<2,>=1.6.5) ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme (>=0.1.9) ; extra == 'dev'
Provides-Extra: doc
Requires-Dist: Sphinx (<2,>=1.6.5) ; extra == 'doc'
Requires-Dist: sphinx-rtd-theme (>=0.1.9) ; extra == 'doc'
Provides-Extra: lint
Requires-Dist: flake8 (==3.7.8) ; extra == 'lint'
Requires-Dist: isort (==4.3.21) ; extra == 'lint'
Requires-Dist: black (==19.3b) ; extra == 'lint'
Provides-Extra: test
Requires-Dist: pytest (==4.4.0) ; extra == 'test'
Requires-Dist: pytest-xdist (==1.28.0) ; extra == 'test'
Requires-Dist: pytest-watch (<5,>=4.1.0) ; extra == 'test'
Requires-Dist: tox (<3,>=2.9.1) ; extra == 'test'
Requires-Dist: hypothesis (==4.54.0) ; extra == 'test'
Requires-Dist: ruamel.yaml (==0.15.87) ; extra == 'test'
Requires-Dist: mypy-extensions (<1.0.0,>=0.4.1) ; extra == 'test'

py-ssz
======

`Join the chat at
https://gitter.im/ethereum/py-ssz <https://gitter.im/ethereum/py-ssz?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge>`__
`Build Status <https://circleci.com/gh/ethereum/py-ssz>`__ `PyPI
version <https://badge.fury.io/py/ssz>`__ `Python
versions <https://pypi.python.org/pypi/ssz>`__ `Docs
build <http://ssz.readthedocs.io/en/latest/?badge=latest>`__

Python implementation of the Simple Serialization encoding and decoding

Read more in the `documentation on
ReadTheDocs <https://ssz.readthedocs.io/>`__. `View the change
log <https://ssz.readthedocs.io/en/latest/releases.html>`__.

Quickstart
----------

.. code:: sh

   pip install ssz

Developer Setup
---------------

If you would like to hack on py-ssz, please check out the `Ethereum
Development Tactical
Manual <https://github.com/pipermerriam/ethereum-dev-tactical-manual>`__
for information on how we do:

-  Testing
-  Pull Requests
-  Code Style
-  Documentation

Development Environment Setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can set up your dev environment with:

.. code:: sh

   git clone git@github.com:ethereum/py-ssz.git
   cd py-ssz
   virtualenv -p python3 venv
   . venv/bin/activate
   pip install -e .[dev]

Testing Setup
~~~~~~~~~~~~~

During development, you might like to have tests run on every file save.

Show flake8 errors on file change:

.. code:: sh

   # Test flake8
   when-changed -v -s -r -1 ssz/ tests/ -c "clear; flake8 ssz tests && echo 'flake8 success' || echo 'error'"

Run multi-process tests in one command, but without color:

.. code:: sh

   # in the project root:
   pytest --numprocesses=4 --looponfail --maxfail=1
   # the same thing, succinctly:
   pytest -n 4 -f --maxfail=1

Run in one thread, with color and desktop notifications:

.. code:: sh

   cd venv
   ptw --onfail "notify-send -t 5000 'Test failure ⚠⚠⚠⚠⚠' 'python 3 test on py-ssz failed'" ../tests ../ssz

Release setup
~~~~~~~~~~~~~

For Debian-like systems:

::

   apt install pandoc

To release a new version:

.. code:: sh

   make release bump=$$VERSION_PART_TO_BUMP$$

How to bumpversion
^^^^^^^^^^^^^^^^^^

The version format for this repo is ``{major}.{minor}.{patch}`` for
stable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable
(``stage`` can be alpha or beta).

To issue the next version in line, specify which part to bump, like
``make release bump=minor`` or ``make release bump=devnum``. This is
typically done from the master branch, except when releasing a beta (in
which case the beta is released from master, and the previous stable
branch is released from said branch). To include changes made with each
release, update “docs/releases.rst” with the changes, and apply commit
directly to master before release.

If you are in a beta version, ``make release bump=stage`` will switch to
a stable.

To issue an unstable version when the current version is stable, specify
the new version explicitly, like
``make release bump="--new-version 4.0.0-alpha.1 devnum"``

